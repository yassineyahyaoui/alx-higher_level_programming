============================
``0-add_integer`` module
============================

``add_integer()`` will take two arguments that must be integers and then add
them together with the ``+`` operator.

::

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Now Use it
    >>> add_integer(0, 1)
    1

    >>> add_integer(1, 2)
    3

    >>> add_integer(0, -1)
    -1

    >>> add_integer(1000.1, 1)
    1001

    >>> add_integer(1000.1, 1000.9)
    2000

    >>> add_integer(1000.1, -1000.9)
    0

    >>> add_integer(0.0)
    98

    >>> add_integer(-98)
    0

    >>> add_integer(0.0, None)
    Traceback (most recent call last):
	    ...
    TypeError: b must be an integer

    >>> add_integer(0, "pepe")
    Traceback (most recent call last):
	    ...
    TypeError: b must be an integer

    >>> add_integer("pepe", 1)
    Traceback (most recent call last):
	    ...
    TypeError: a must be an integer

    >>> add_integer("pepe", "mao")
    Traceback (most recent call last):
    	    ...
    TypeError: a must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

    >>> add_integer('3', 3)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

    >>> add_integer((1, 1))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

    >>> add_integer(123, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

    >>> add_integer("dog")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

    >>> add_integer(-1)
    97
    >>> add_integer(5, float("nan"))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
    >>> add_integer(1, float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer
